{"ast":null,"code":"const API_BASE_URL='http://localhost:3301/api/sentences';// Função para buscar uma frase motivacional aleatória\nexport const fetchRandomMotivationalSentence=async()=>{try{const response=await fetch(\"\".concat(API_BASE_URL,\"/random-motivational\"));if(!response.ok){throw new Error('Network response was not ok');}return response.json();}catch(error){console.error('Failed to fetch random motivational sentence:',error);throw error;// Propagando o erro para ser tratado por quem chama a função\n}};// Função para buscar uma frase motivacional baseada no loginStreak\nexport const fetchLoginCountMotivationalSentence=async loginStreak=>{try{const response=await fetch(\"\".concat(API_BASE_URL,\"/login-count-message?loginStreak=\").concat(loginStreak));if(!response.ok){throw new Error('Network response was not ok');}return response.json();}catch(error){console.error('Failed to fetch login count motivational sentence:',error);throw error;// Propagando o erro para ser tratado por quem chama a função\n}};","map":{"version":3,"names":["API_BASE_URL","fetchRandomMotivationalSentence","response","fetch","concat","ok","Error","json","error","console","fetchLoginCountMotivationalSentence","loginStreak"],"sources":["C:/temp/Atividade extensionista 2/front-end/src/services/sentenceService.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:3301/api/sentences';\r\n\r\n// Função para buscar uma frase motivacional aleatória\r\nexport const fetchRandomMotivationalSentence = async () => {\r\n    try {\r\n        const response = await fetch(`${API_BASE_URL}/random-motivational`);\r\n        if (!response.ok) {\r\n            throw new Error('Network response was not ok');\r\n        }\r\n        return response.json();\r\n    } catch (error) {\r\n        console.error('Failed to fetch random motivational sentence:', error);\r\n        throw error;  // Propagando o erro para ser tratado por quem chama a função\r\n    }\r\n};\r\n\r\n// Função para buscar uma frase motivacional baseada no loginStreak\r\nexport const fetchLoginCountMotivationalSentence = async (loginStreak) => {\r\n    try {\r\n        const response = await fetch(`${API_BASE_URL}/login-count-message?loginStreak=${loginStreak}`);\r\n        if (!response.ok) {\r\n            throw new Error('Network response was not ok');\r\n        }\r\n        return response.json();\r\n    } catch (error) {\r\n        console.error('Failed to fetch login count motivational sentence:', error);\r\n        throw error;  // Propagando o erro para ser tratado por quem chama a função\r\n    }\r\n};\r\n"],"mappings":"AAAA,KAAM,CAAAA,YAAY,CAAG,qCAAqC,CAE1D;AACA,MAAO,MAAM,CAAAC,+BAA+B,CAAG,KAAAA,CAAA,GAAY,CACvD,GAAI,CACA,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAAC,MAAA,CAAIJ,YAAY,wBAAsB,CAAC,CACnE,GAAI,CAACE,QAAQ,CAACG,EAAE,CAAE,CACd,KAAM,IAAI,CAAAC,KAAK,CAAC,6BAA6B,CAAC,CAClD,CACA,MAAO,CAAAJ,QAAQ,CAACK,IAAI,CAAC,CAAC,CAC1B,CAAE,MAAOC,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,+CAA+C,CAAEA,KAAK,CAAC,CACrE,KAAM,CAAAA,KAAK,CAAG;AAClB,CACJ,CAAC,CAED;AACA,MAAO,MAAM,CAAAE,mCAAmC,CAAG,KAAO,CAAAC,WAAW,EAAK,CACtE,GAAI,CACA,KAAM,CAAAT,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAAC,MAAA,CAAIJ,YAAY,sCAAAI,MAAA,CAAoCO,WAAW,CAAE,CAAC,CAC9F,GAAI,CAACT,QAAQ,CAACG,EAAE,CAAE,CACd,KAAM,IAAI,CAAAC,KAAK,CAAC,6BAA6B,CAAC,CAClD,CACA,MAAO,CAAAJ,QAAQ,CAACK,IAAI,CAAC,CAAC,CAC1B,CAAE,MAAOC,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,oDAAoD,CAAEA,KAAK,CAAC,CAC1E,KAAM,CAAAA,KAAK,CAAG;AAClB,CACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}