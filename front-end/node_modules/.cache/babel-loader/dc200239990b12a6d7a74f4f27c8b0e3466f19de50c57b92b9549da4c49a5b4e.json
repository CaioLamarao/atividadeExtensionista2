{"ast":null,"code":"const API_BASE_URL = 'http://localhost:3301/api/sentences';\nexport const fetchRandomMotivationalSentence = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/random-motivational`);\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json();\n  } catch (error) {\n    console.error('Failed to fetch random motivational sentence:', error);\n    throw error;\n  }\n};\nexport const fetchLoginCountMotivationalSentence = async loginStreak => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/login-count-message?loginStreak=${loginStreak}`);\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json();\n  } catch (error) {\n    console.error('Failed to fetch login count motivational sentence:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","fetchRandomMotivationalSentence","response","fetch","ok","Error","json","error","console","fetchLoginCountMotivationalSentence","loginStreak"],"sources":["C:/temp/Atividade extensionista 2/front-end/src/services/sentenceService.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:3301/api/sentences';\r\n\r\nexport const fetchRandomMotivationalSentence = async () => {\r\n    try {\r\n        const response = await fetch(`${API_BASE_URL}/random-motivational`);\r\n        if (!response.ok) {\r\n            throw new Error('Network response was not ok');\r\n        }\r\n        return response.json();\r\n    } catch (error) {\r\n        console.error('Failed to fetch random motivational sentence:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const fetchLoginCountMotivationalSentence = async (loginStreak) => {\r\n    try {\r\n        const response = await fetch(`${API_BASE_URL}/login-count-message?loginStreak=${loginStreak}`);\r\n        if (!response.ok) {\r\n            throw new Error('Network response was not ok');\r\n        }\r\n        return response.json();\r\n    } catch (error) {\r\n        console.error('Failed to fetch login count motivational sentence:', error);\r\n        throw error;\r\n    }\r\n};\r\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG,qCAAqC;AAE1D,OAAO,MAAMC,+BAA+B,GAAG,MAAAA,CAAA,KAAY;EACvD,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,YAAY,sBAAsB,CAAC;IACnE,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAClD;IACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;EAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,+CAA+C,EAAEA,KAAK,CAAC;IACrE,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAME,mCAAmC,GAAG,MAAOC,WAAW,IAAK;EACtE,IAAI;IACA,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,YAAY,oCAAoCU,WAAW,EAAE,CAAC;IAC9F,IAAI,CAACR,QAAQ,CAACE,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAClD;IACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;EAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,oDAAoD,EAAEA,KAAK,CAAC;IAC1E,MAAMA,KAAK;EACf;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}